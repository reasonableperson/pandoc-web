// Generated by CoffeeScript 1.6.3
(function() {
  angular.module('pandoc.controllers', ['ui.codemirror', 'LocalStorageModule', 'ngSanitize', 'pandoc.services']).controller('pandoc-web', [
    '$scope', 'localStorageService', '$sanitize', '$location', 'pandocument', function(scope, storage, $sanitize, location, pandocument) {
      var doc;
      scope.location = location;
      scope.pandoc = pandocument;
      scope.documents = storage.get('documents');
      if (scope.documents == null) {
        console.log('no documents found');
        scope.documents = [
          {
            name: 'example',
            markdown: '# Markdown view'
          }
        ];
        storage.add('documents', scope.documents);
      } else {
        console.log(scope.documents.length + ' documents found.');
      }
      doc = scope.documents[0];
      pandocument.markdown = doc.markdown;
      pandocument.name = doc.name;
      pandocument.html = pandocument.converter.makeHtml(doc.markdown);
      return console.log('current pandoc', pandocument);
    }
  ]).controller('markdown', [
    '$scope', '$element', 'localStorageService', '$sanitize', '$location', 'pandocument', function(scope, elem, storage, $sanitize, location, pandoc) {
      scope.cmOptions = {
        mode: 'markdown',
        theme: 'solarized',
        onChange: function() {
          return pandoc.html = pandoc.converter.makeHtml(pandoc.markdown);
        }
      };
      scope.cmOptions.onChange();
      scope.save = function() {
        pandoc.lastSaved = new Date();
        return storage.add('documents', [pandoc]);
      };
      return scope["new"] = function() {
        return scope.documents.push({
          name: scope.newDoc,
          markdown: "Add content to your new document..."
        });
      };
    }
  ]).controller('html', [
    '$scope', 'pandocument', function(scope, pandocument) {
      return scope.pandocument = pandocument;
    }
  ]).controller('pdf', [
    '$scope', '$http', 'pandocument', function(scope, http, pandocument) {
      return scope.renderPdf = function() {
        console.log('rendering...');
        return http.post('render/pdf', {
          markdown: pandocument.markdown
        }).success(function(data, status, headers, config) {
          pandocument.pdfUrl = 'tmp/' + data + '.pdf';
          return console.log('pdfUrl', pandocument.pdfUrl);
        }).error(function(data, status, headers, config) {
          return console.log(data);
        });
      };
    }
  ]);

}).call(this);
